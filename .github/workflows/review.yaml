name: Review pull request

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  check_and_format:
    name: Check and format files
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Node.js
      uses: actions/setup-node@v5
      with:
        node-version: 18

    - name: Install dependencies
      run: npm install diff prettier

    - name: Run checks and formatting
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs');
          const prettier = require('prettier');
          const diff = require('diff');

          const prNumber = context.issue.number;

          // Get the list of files changed in the pull request
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: prNumber
          });

          let comments = [];
          let event = 'APPROVE';

          // Check each file
          for (const file of files) {
            console.log(`::group::${file.filename}`)

             // Check if the filename is lowercase (except for PDF, ZIP, and DOCX files)
            if (!file.filename.match(/\.(pdf|zip|docx)$/i)) {
              if (file.filename !== file.filename.toLowerCase()) {
                comments.push({
                  path: file.filename,
                  subject_type : "file",
                  body: `Please change filename \`${file.filename}\` to lowercase.`
                });
                event = 'REQUEST_CHANGES';
              }
            }

            // Check supported files types for formatting and style
            // - only checking markdown files for now as we might need context for other file types
            if (file.filename.match(/\.(md)$/i)) {
              console.log("Checking format")

              // Parse the patch value
              const parsedPatch = diff.parsePatch(file.patch);

              // Iterate over each file in the patch
              for (const patch of parsedPatch) {

                // Iterate over each hunk in the file
                for (const hunk of patch.hunks) {
                  console.log('Hunk:', hunk);
          
                  // Iterate over each line in the hunk
                  let original = '';
                  for (const line of hunk.lines) {
                    if (!line.startsWith('-')) {
                      original += line.slice(1) + '\n';
                    }
                  }

                  console.log(`Original:\n ${original}`);

                  const formatted = await prettier.format(original, { filepath: file.filename });
                  
                  // If the file was changed, add a comment with the changes as a suggestion
                  if (formatted !== original) {
                    console.log("Format of hunk changed, adding suggestion(s)")
                    event = 'COMMENT';
    
                    comments.push({
                      path: file.filename,
                      line: (hunk.newStart + hunk.newLines) - 1,
                      start_line: hunk.newStart,
                      start_side: 'RIGHT',
                      body: `Suggestion:\n\`\`\`suggestion\n${formatted}\`\`\``
                    });
                  }
                }
              }
            }

            console.log("::endgroup::")
          }

          // Create a review with the comments or approve the pull request
          console.log("::group::Creating pull request review")
          await github.rest.pulls.createReview({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: prNumber,
            event: event,
            comments: comments
          });

          console.log("::endgroup::")